{"version":3,"sources":["../../../lib/sockets/index.js"],"names":["chat","require","Room","Message","rooms","connection","module","exports","up","io","on","socket","console","log","emit","data","tempArray","filter","elem","idx","arr","getName","room","length","error","join","addUser","user","push","to","getUsers","isUserNameCorrect","isRoomNameCorrect","roomIndex","forEach","el","id","a","getMessages","message","text","setUser","username","addMessage"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconst chat = require('lib/chat');\n\nlet Room = require('lib/chat/Room');\nlet Message = require('lib/chat/Message');\n\nlet rooms = [],\n    connection = 0;\n\n\nmodule.exports.up = function (io) {\n    io.on('connection', function (socket) {\n        console.log('socket is connected! connection #' + ++connection);\n        socket.emit('testConnect', {connection: true});\n\n        socket.on('create room', function (data) {\n            let tempArray = rooms.filter(function (elem, idx, arr) {\n                return elem.getName() === data.room;\n            });\n            if (tempArray.length) {\n                socket.emit('error create room', {error: 'Room has already existed!'});\n            } else {\n                socket.join(data.room);\n                let room = new Room(data.room);\n                room.addUser(data.user);\n                rooms.push(room);\n                io.to(room.getName()).emit('add room', room.getName());\n                io.to(room.getName()).emit('add client', room.getUsers()[0]);\n            }\n        });\n\n        socket.on('try join', function (data) {\n            let isUserNameCorrect = true;\n            let isRoomNameCorrect = false;\n            let roomIndex = 0;\n            rooms.forEach(function (elem, idx, arr) {\n                if (elem.getName() === data.room) {\n                    socket.join(data.room);\n                    isRoomNameCorrect = true;\n                    roomIndex = idx;\n                }\n                elem.getUsers().forEach(function (el, id, a) {\n                    if (el === data.user) {\n                        isUserNameCorrect = false;\n                    }\n                });\n            });\n            if (isRoomNameCorrect && isUserNameCorrect) {\n                rooms[roomIndex].addUser(data.user);\n                socket.emit('after join', {\n                    room: rooms[roomIndex].getName(),\n                    user: data.user\n                });\n                io.to(data.room).emit('update clients', rooms[roomIndex].getUsers());\n                io.to(data.room).emit('add old messages', rooms[roomIndex].getMessages());\n            }\n        });\n\n        socket.on('new message', function (data) {\n            let room = rooms.filter(function (elem, idx, arr) {\n                return elem.getName() === data.room;\n            })[0];\n            let message = new Message(data.text);\n            message.setUser(data.username);\n            room.addMessage(message);\n            io.to(data.room).emit('update messages', message);\n        });\n\n    });\n};"]}