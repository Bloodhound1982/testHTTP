{"version":3,"sources":["../../../lib/sockets/index.js"],"names":["chat","require","Room","rooms","connection","module","exports","up","io","on","socket","console","log","emit","data","tempArray","filter","elem","idx","arr","getName","room","length","error","join","addUser","user","push","to","getUsers","isUserNameCorrect","isRoomNameCorrect","roomIndex","forEach","roomName","users","el","id","a"],"mappings":"AAAA;;AAEA,IAAMA,OAAOC,QAAQ,UAAR,CAAb;;AAEA,IAAIC,OAAOD,QAAQ,eAAR,CAAX;;AAEA,IAAIE,QAAQ,EAAZ;AAAA,IACIC,aAAa,CADjB;;AAIAC,OAAOC,OAAP,CAAeC,EAAf,GAAoB,UAAUC,EAAV,EAAc;AAC9BA,OAAGC,EAAH,CAAM,YAAN,EAAoB,UAAUC,MAAV,EAAkB;AAClCC,gBAAQC,GAAR,CAAY,sCAAsC,EAAER,UAApD;AACAM,eAAOG,IAAP,CAAY,aAAZ,EAA2B,EAACT,YAAY,IAAb,EAA3B;;AAEAM,eAAOD,EAAP,CAAU,aAAV,EAAyB,UAAUK,IAAV,EAAgB;AACrC,gBAAIC,YAAYZ,MAAMa,MAAN,CAAa,UAAUC,IAAV,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACnD,uBAAOF,KAAKG,OAAL,OAAmBN,KAAKO,IAA/B;AACH,aAFe,CAAhB;AAGA,gBAAIN,UAAUO,MAAd,EAAsB;AAClBZ,uBAAOG,IAAP,CAAY,mBAAZ,EAAiC,EAACU,OAAO,2BAAR,EAAjC;AACH,aAFD,MAEO;AACHb,uBAAOc,IAAP,CAAYV,KAAKO,IAAjB;AACA,oBAAIA,OAAO,IAAInB,IAAJ,CAASY,KAAKO,IAAd,CAAX;AACAA,qBAAKI,OAAL,CAAaX,KAAKY,IAAlB;AACAvB,sBAAMwB,IAAN,CAAWN,IAAX;AACAb,mBAAGoB,EAAH,CAAMP,KAAKD,OAAL,EAAN,EAAsBP,IAAtB,CAA2B,UAA3B,EAAuCQ,KAAKD,OAAL,EAAvC;AACAZ,mBAAGoB,EAAH,CAAMP,KAAKD,OAAL,EAAN,EAAsBP,IAAtB,CAA2B,YAA3B,EAAyCQ,KAAKQ,QAAL,GAAgB,CAAhB,CAAzC;AACH;AACJ,SAdD;;AAgBAnB,eAAOD,EAAP,CAAU,UAAV,EAAsB,UAAUK,IAAV,EAAgB;AAClC,gBAAIgB,oBAAoB,IAAxB;AACA,gBAAIC,oBAAoB,KAAxB;AACA,gBAAIC,kBAAJ;AACA7B,kBAAM8B,OAAN,CAAc,UAAUhB,IAAV,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACpC,oBAAIF,KAAKiB,QAAL,KAAkBpB,KAAKO,IAA3B,EAAiC;AAC7BX,2BAAOc,IAAP,CAAYV,KAAKO,IAAjB;AACAU,wCAAoB,IAApB;AACAC,gCAAYd,GAAZ;AACH;AACDD,qBAAKkB,KAAL,CAAWF,OAAX,CAAmB,UAAUG,EAAV,EAAcC,EAAd,EAAkBC,CAAlB,EAAqB;AACpC,wBAAIF,OAAOtB,KAAKY,IAAhB,EAAsB;AAClBI,4CAAoB,KAApB;AACH;AACJ,iBAJD;AAKH,aAXD;AAYA,gBAAIC,qBAAqBD,iBAAzB,EAA4C;AACxC3B,sBAAM6B,SAAN,EAAiBG,KAAjB,CAAuBR,IAAvB,CAA4Bb,KAAKY,IAAjC;AACA;AACAf,wBAAQC,GAAR,CAAYT,MAAM6B,SAAN,EAAiBG,KAA7B;AACAzB,uBAAOG,IAAP,CAAY,YAAZ,EAA0BV,MAAM6B,SAAN,CAA1B;AACAxB,mBAAGoB,EAAH,CAAMd,KAAKO,IAAX,EAAiBR,IAAjB,CAAsB,gBAAtB,EAAwCV,MAAM6B,SAAN,EAAiBG,KAAzD;AACH;AACJ,SAvBD;;AAyBAzB,eAAOD,EAAP,CAAU,aAAV,EAAyB,UAAUK,IAAV,EAAgB,CAExC,CAFD;;AAOA;;;;;;;;;;;;;;;AAkBH,KAtED;;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAjFD","file":"index.js","sourcesContent":["'use strict';\n\nconst chat = require('lib/chat');\n\nlet Room = require('lib/chat/Room');\n\nlet rooms = [],\n    connection = 0;\n\n\nmodule.exports.up = function (io) {\n    io.on('connection', function (socket) {\n        console.log('socket is connected! connection #' + ++connection);\n        socket.emit('testConnect', {connection: true});\n\n        socket.on('create room', function (data) {\n            let tempArray = rooms.filter(function (elem, idx, arr) {\n                return elem.getName() === data.room;\n            });\n            if (tempArray.length) {\n                socket.emit('error create room', {error: 'Room has already existed!'});\n            } else {\n                socket.join(data.room);\n                let room = new Room(data.room);\n                room.addUser(data.user);\n                rooms.push(room);\n                io.to(room.getName()).emit('add room', room.getName());\n                io.to(room.getName()).emit('add client', room.getUsers()[0]);\n            }\n        });\n\n        socket.on('try join', function (data) {\n            let isUserNameCorrect = true;\n            let isRoomNameCorrect = false;\n            let roomIndex;\n            rooms.forEach(function (elem, idx, arr) {\n                if (elem.roomName === data.room) {\n                    socket.join(data.room);\n                    isRoomNameCorrect = true;\n                    roomIndex = idx;\n                }\n                elem.users.forEach(function (el, id, a) {\n                    if (el === data.user) {\n                        isUserNameCorrect = false;\n                    }\n                });\n            });\n            if (isRoomNameCorrect && isUserNameCorrect) {\n                rooms[roomIndex].users.push(data.user);\n                // console.log(`${roomIndex} and ${data.user}`);\n                console.log(rooms[roomIndex].users);\n                socket.emit('after join', rooms[roomIndex]);\n                io.to(data.room).emit('update clients', rooms[roomIndex].users);\n            }\n        });\n\n        socket.on('new message', function (data) {\n\n        });\n\n\n\n\n        /*\n                let name = false;\n\n                socket.emit('messages', chat_parts.getLast());\n\n                socket.on('name/set', function(data) {\n                    console.log('set name', name);\n                    name = data;\n                });\n\n                socket.on('message', function(data) {\n                    let message = {\n                        name: data.name,\n                        message: data.message\n                    };\n                    console.log(message);\n                    chat.send(message);\n                });*/\n    });\n\n\n    // module.exports.sendAll = function (eventName, data) {\n    //    io.sockets.emit(eventName, data);\n    // };\n    //\n    // module.exports.sendMessageAll = function (eventName, data) {\n    //    sendAll(eventName, data);\n    // }\n};"]}